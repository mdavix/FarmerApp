{"version":3,"sources":["cost.js","App.js","tripPlanner.js","isTripValid.js","serviceWorker.js","index.js"],"names":["result","cost","errors","App","useState","corn","setCorn","geese","setGeese","resultMessage","setResultMessage","className","src","alt","type","value","onChange","e","target","onClick","costOfJourney","bagsOfCorn","numberOfGeese","parseInt","listOfCrossings","crossings","index","push","tripPlanner","isTripValid","join","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPA0BA,SAASA,EAAOC,GACd,MAAO,CACLA,KAAMA,EACNC,OAAQ,ICUGC,MAjCf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,OAG6BJ,mBAAS,uBAHtC,mBAGNK,EAHM,KAGSC,EAHT,KAKb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAI,uDAAuDC,IAAI,WACpE,6EAGA,2BAAOC,KAAK,OAAOC,MAAOV,EAAMW,SAAU,SAACC,GAAD,OAAKX,EAAQW,EAAEC,OAAOH,UAChE,sEAGA,2BAAOD,KAAK,OAAOC,MAAOR,EAAOS,SAAU,SAACC,GAAD,OAAKT,EAASS,EAAEC,OAAOH,UAClE,4BAAQI,QAMd,WACE,IAAMC,ED9BH,YAA8C,IAA9BC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,cAEjC,OACStB,EADa,IAAlBsB,GAAsC,IAAfD,GAIL,IAAlBC,GAAsC,IAAfD,EAHX,KAOU,KAArBA,GAAc,IAAqC,KAAxBC,GAAiB,GACjC,IAGZA,GAAiB,EAEM,KADW,EAAhBA,EAAqB,GAMvB,KAFQ,EAAbD,EAAkB,ICWTpB,CAAK,CAAEoB,WAAYE,SAASlB,GAAOiB,cAAeC,SAAShB,KAC3EiB,EC/BH,YAAmD,IAA7BH,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,cAErC,GAAmB,IAAfD,GAAsC,IAAlBC,EACpB,MAAO,CAAEG,UAAW,CAAC,kBAAmB,sBAAuB,qBAGnE,GAAmB,IAAfJ,GAAsC,IAAlBC,EACpB,MAAO,CAAEG,UAAW,CAAC,kBAAmB,sBAAuB,mBAAoB,mBAAoB,mBAAoB,sBAAuB,oBAGtJ,GAAmB,IAAfJ,GAAsC,IAAlBC,EACpB,MAAO,CAAEG,UAAW,CAAC,mBAAoB,sBAAuB,kBAAmB,oBAAqB,kBAAmB,sBAAuB,qBAGtJ,GAAIJ,GAAc,EAAG,CAEjB,IADA,IAAMrB,EAAS,CAAC,mBACP0B,EAAQ,EAAGA,EAAQL,EAAYK,IACpC1B,EAAO2B,KAAK,sBAAuB,mBAGvC,MAAO,CAAEF,UAAWzB,GAGxB,GAAIsB,GAAiB,EAAG,CAEpB,IADA,IAAMtB,EAAS,CAAC,oBACP0B,EAAQ,EAAGA,EAAQJ,EAAeI,IACvC1B,EAAO2B,KAAK,sBAAuB,oBAGvC,MAAO,CAAEF,UAAWzB,GAIxB,MAAO,CAAEyB,UAAW,CAAC,uBDFGG,CAAY,CAAEP,WAAYE,SAASlB,GAAOiB,cAAeC,SAAShB,KAE1FG,EEjCG,SAAqBL,EAAMiB,GAChC,OAAsB,IAAlBA,GAAgC,IAATjB,KAIvBA,GAAQ,GAAKiB,GAAiB,KAIZ,IAAlBA,GAAgC,IAATjB,GFwBRwB,CAAYN,SAASlB,GAAOkB,SAAShB,IAClD,cAAgBiB,EAAgBC,UAAUK,KAAK,WAAa,6BAA4BV,EAAcnB,KACtG,wBAZA,YACCQ,KGZWsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0d967e5c.chunk.js","sourcesContent":["export function cost({ bagsOfCorn, numberOfGeese }) {\n  \n  if (numberOfGeese === 1 && bagsOfCorn === 2) {\n    return result(1.75);\n  }\n\n  if (numberOfGeese === 2 && bagsOfCorn === 1) {\n    return result(1.75);\n  }\n\n  if ((bagsOfCorn || 0) === 0 && (numberOfGeese || 0) === 0) {\n    return result(0.25);\n  }\n\n  if (numberOfGeese >= 1) {\n    const gooseTrips = (numberOfGeese * 2) - 1;\n    return result(gooseTrips*0.25);\n  }\n\n  const trips = (bagsOfCorn * 2) - 1;\n\n  return result(trips*0.25);\n\n}\n\n\nfunction result(cost){\n  return { \n    cost: cost,\n    errors: [] }\n}\n\n","import React, { useState }  from 'react';\nimport './App.css';\nimport { cost } from './cost';\nimport { isTripValid } from './isTripValid';\nimport { tripPlanner } from './tripPlanner';\n\nfunction App() {\n  const [corn, setCorn] = useState(\"\");\n  const [geese, setGeese] = useState(\"\");\n  const [resultMessage, setResultMessage] = useState(\"Please enter values\");\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src=\"https://i.ytimg.com/vi/fsAgC8BpEu0/maxresdefault.jpg\" alt=\"farmer\"></img>\n        <p>\n          Please enter the amount of bags of corn below:\n        </p>\n        <input type=\"text\" value={corn} onChange={(e)=>setCorn(e.target.value)}></input>\n        <p>\n          Please enter the amount of geese below:\n        </p>\n        <input type=\"text\" value={geese} onChange={(e)=>setGeese(e.target.value)}></input>\n        <button onClick={doCalculation}>Press me</button>\n        {resultMessage}\n      </header>\n    </div>\n  );\n\n  function doCalculation(){\n    const costOfJourney = cost({ bagsOfCorn: parseInt(corn), numberOfGeese: parseInt(geese) });\n    const listOfCrossings = tripPlanner({ bagsOfCorn: parseInt(corn), numberOfGeese: parseInt(geese) });\n    \n    setResultMessage(isTripValid(parseInt(corn), parseInt(geese)) \n      ? \"You should \" + listOfCrossings.crossings.join(\", then \") + \" and it will cost you Â£\" + costOfJourney.cost\n      : \"Journey is invalid\");\n  }\n}\n\nexport default App;\n","export function tripPlanner({bagsOfCorn, numberOfGeese}) {\n\n    if (bagsOfCorn === 1 && numberOfGeese === 1) {\n        return { crossings: [\"Cross with corn\", \"Return with nothing\", \"Cross with goose\"] };\n    }\n\n    if (bagsOfCorn === 1 && numberOfGeese === 2) {\n        return { crossings: [\"Cross with corn\", \"Return with nothing\", \"Cross with goose\", \"Return with corn\", \"Cross with goose\", \"Return with nothing\", \"Cross with corn\"] };\n    }\n\n    if (bagsOfCorn === 2 && numberOfGeese === 1) {\n        return { crossings: [\"Cross with goose\", \"Return with nothing\", \"Cross with corn\", \"Return with goose\", \"Cross with corn\", \"Return with nothing\", \"Cross with goose\"] };\n    }\n\n    if (bagsOfCorn >= 1) {\n        const result = [\"Cross with corn\"];\n        for (let index = 1; index < bagsOfCorn; index++) {\n            result.push(\"Return with nothing\", \"Cross with corn\");\n            \n        }\n        return { crossings: result };\n    }\n\n    if (numberOfGeese >= 1) {\n        const result = [\"Cross with goose\"];\n        for (let index = 1; index < numberOfGeese; index++) {\n            result.push(\"Return with nothing\", \"Cross with goose\");\n            \n        }\n        return { crossings: result };\n    }\n\n\n    return { crossings: [\"Cross with nothing\"] };\n}","export function isTripValid(corn, numberOfGeese) {\n  if (numberOfGeese === 0 || corn === 0) {\n    return true;\n  }\n\n  if (corn >= 3 || numberOfGeese >= 3) {\n    return false;\n  }\n\n  if (numberOfGeese === 1 || corn === 1) {\n    return true;\n  }\n\n  return false;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}